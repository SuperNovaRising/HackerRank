#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <stack>
using namespace std;

int find_next_prime (vector<int> &primes){
    int next_p = primes.empty()? 2 : primes.size() == 1 ? 3: primes.back() + 2;
    for (auto p = primes.begin(); p != primes.end(); p++){
        if (next_p % *p == 0){
            next_p += 2;
            p = primes.begin();
        }
        if (*p > sqrt(next_p))
            break;
    }
    primes.push_back(next_p);
    //cout << "prime" << next_p << endl;
    return next_p;
}

int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int N, Q, x;
    vector <stack<int> > v;
    stack<int> plates;
    cin >> N >> Q;
    for (int i = 0; i < N; i++){
        cin >> x;
        plates.push(x);
    }
    vector<int> primes;
    while (Q > 0){
        stack<int> divisable, not_divisable;
        int prime = find_next_prime(primes);
        Q--;
        while (!plates.empty()){
            if (plates.top() % prime == 0){
                divisable.push(plates.top());
                plates.pop();
            }
            else{
                not_divisable.push(plates.top());
                plates.pop();
            }
        }
        v.push_back(divisable);
        swap(plates, not_divisable);
    }
    // last undivisable
    v.push_back(plates);
    
    for (stack<int> q : v){
        while (!q.empty()){
            cout << q.top() << endl;
            q.pop();
        }
            
    }
    
    return 0;
}